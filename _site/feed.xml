<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://j1nwan.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://j1nwan.github.io//" rel="alternate" type="text/html" /><updated>2021-01-28T00:55:54+09:00</updated><id>https://j1nwan.github.io//feed.xml</id><title type="html">:cRon</title><subtitle>개발자 준비생 다양한 Sever등 다양한 개발을 공부하는 블로그</subtitle><author><name>cron</name><email>weamicron@gmail.com</email></author><entry><title type="html">Servlet에 대해 알아보자</title><link href="https://j1nwan.github.io//sevlet/Sevlet/" rel="alternate" type="text/html" title="Servlet에 대해 알아보자" /><published>2021-01-28T00:00:00+09:00</published><updated>2021-01-28T14:09:00+09:00</updated><id>https://j1nwan.github.io//sevlet/Sevlet</id><content type="html" xml:base="https://j1nwan.github.io//sevlet/Sevlet/">&lt;h1 id=&quot;servlet-이란&quot;&gt;Servlet 이란?&lt;/h1&gt;
&lt;p&gt;서블릿의 만드는 목적은 클라이언트에 서비스 하기 위해서 이다.&lt;br /&gt;
그렇다면 서버에 서블릿이 준비되어 있어야 하는데 어떻게 준비를 할 수 있을까?&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;웹-어플리케이션-접근&quot;&gt;웹 어플리케이션 접근&lt;/h1&gt;
&lt;p&gt;서블릿은 웹서버에서 서비스되는 페이지이다.&lt;br /&gt;
그래서 서블릿을 개발하였으면, 해당 서블릿 실행 파일을 웹 서버에 올려두어야 한다.&lt;br /&gt;
그렇다면 위치는 어디이며, 클라이언트는 어떻게 서블릿에 접근하는가?&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;클라이언트&quot;&gt;클라이언트&lt;/h2&gt;
&lt;p&gt;클라이언트는 웹서버에 서비스 요청할 때, URL 정보를 보낸다.&lt;br /&gt;
클라이언트가 요청한 문서를 찾아가고자 URL 정보를 활용하는데, URL 정보의 뜻은 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;http://127.0.0.1:8080&lt;/strong&gt;/firstweb/HelloServlet&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이라고 나타내는 URL이 있으면, &lt;strong&gt;[8080]&lt;/strong&gt;까지는 웹서버의 포트와 아이피 그 뒤에 &lt;strong&gt;[firstweb]&lt;/strong&gt;은 웹 어플리케이션을 뜻하며, &lt;strong&gt;[HelloServlet]&lt;/strong&gt;은 클라이언트가 요청한 최종 문서정보이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;웹-어플리케이션&quot;&gt;웹 어플리케이션&lt;/h2&gt;
&lt;p&gt;서비스는 서버에서 어플리케이션 단위로 이루어진다.&lt;br /&gt;
웹서버마다 시작될 때 자동으로 어플리케이션으로 인식하여 서비스를 올려주는 디렉터리가 존재하는데,&lt;br /&gt;
아파치 톰캣은 톰캣이 설치한 디렉터리 하위의 &lt;strong&gt;[webapps]&lt;/strong&gt; 디렉터리에 있는 하위 디렉터리 또는 &lt;br /&gt;
&lt;strong&gt;[war]&lt;/strong&gt; 파일을 하나의 어플리케이션으로 인식한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹-어플리케이션-구조&quot;&gt;웹 어플리케이션 구조&lt;/h3&gt;
&lt;p&gt;반드시 모든 웹 어플리케이션이 공통으로 가져야 하는 디렉터리와 파일이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;WEB-INF 디렉토리&lt;br /&gt;
  웹 어플리케이션에서 서비스 하려는 클래스 파일이 있다면,&lt;br /&gt;
  &lt;strong&gt;[WEB-INF/classes]&lt;/strong&gt; 클래스 파일들이 &lt;strong&gt;jar&lt;/strong&gt;로 압축되어 있다면 &lt;strong&gt;[WEB-INF/lib]&lt;/strong&gt;에 존재해야한다. 
  이는, &lt;strong&gt;[WAS]&lt;/strong&gt;를 구성하는 어플리케이션 서버들이 자동으로 인식하게끔 하기위함이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;web.xml&lt;br /&gt;
  &lt;strong&gt;web.xml&lt;/strong&gt;은 &lt;strong&gt;[WEB-INF]&lt;/strong&gt; 안에 있어야 한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;서블릿-구현&quot;&gt;서블릿 구현&lt;/h3&gt;
&lt;p&gt;서블릿 클래스 간의 관계&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿을 구현할 때 반드시 상속해야되는 클래스가 존재 (&lt;strong&gt;HttpServlet&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;웹상에서 클라이언트 요청이 있을 때 해당 서블릿 실행하는 조건들이 포함되어있음.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HttpServlet&lt;/strong&gt;은 &lt;strong&gt;GenericServlet&lt;/strong&gt;을 상속받고, &lt;br /&gt;
&lt;strong&gt;Seralizable&lt;/strong&gt;, &lt;strong&gt;Servlet&lt;/strong&gt;, &lt;strong&gt;ServletConfig&lt;/strong&gt; 클래스를 상속받고 있다.&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
다음 포스트는 Servlet의 기초 사용방법을 알아보자 :)&lt;br /&gt;
최종적으로는 Sevlet/JSP로 꽤 쓸만한 웹 브라우저를 만드려고 한다.&lt;/p&gt;</content><author><name>cron</name><email>weamicron@gmail.com</email></author><category term="Sevlet" /><category term="Servlet" /><summary type="html">JAVA Servlet</summary></entry></feed>